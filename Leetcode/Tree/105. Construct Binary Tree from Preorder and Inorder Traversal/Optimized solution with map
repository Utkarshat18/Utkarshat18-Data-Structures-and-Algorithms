/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    private:
    TreeNode*solve(vector<int>pre, vector<int>in,int &index,int inorderstartIndex,int inorderendIndex,int n,map<int,int> &mp)
    {
        if(inorderstartIndex>inorderendIndex || index>n)
        {
            return NULL;
        }
        int element=pre[index++];
        TreeNode * temp=new TreeNode (element);
        int position=mp[element];

        temp->left=solve(pre,in,index,inorderstartIndex,position-1,n,mp);
        temp->right=solve(pre,in,index,position+1,inorderendIndex,n,mp);
        return temp;
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preOrderindex=0;
        int n=preorder.size();
        map<int,int>mp;
        for(int i=0;i<n;i++)
        {
            mp[inorder[i]]=i;
        }
        TreeNode * ans=solve(preorder,inorder,preOrderindex,0,n-1,n-1,mp);
        return ans;
    }
};
